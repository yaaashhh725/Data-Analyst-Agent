[
  {
    "task_id": 1,
    "description": "Load all parquet files from the S3 bucket into a single pandas DataFrame. Use the `read_parquet` function with the `s3://indian-high-court-judgments/metadata/parquet/year=*/court=*/bench=*/metadata.parquet?s3_region=ap-south-1` URL. Print the DataFrame's info and the first 5 rows to get a sense of the data. Save the DataFrame to a parquet file named `task_1_all_metadata.parquet`.",
    "tool_needed": "python",
    "dependencies": [],
    "input_artifacts": [],
    "output_artifacts": [
      "task_1_all_metadata.parquet"
    ]
  },
  {
    "task_id": 2,
    "description": "Filter the DataFrame to include only the years 2019, 2020, 2021, and 2022. Save the filtered DataFrame to a parquet file named `task_2_filtered_years.parquet`. Print the info and the first 5 rows of the filtered dataframe.",
    "tool_needed": "python",
    "dependencies": [
      1
    ],
    "input_artifacts": [
      "task_1_all_metadata.parquet"
    ],
    "output_artifacts": [
      "task_2_filtered_years.parquet"
    ]
  },
  {
    "task_id": 3,
    "description": "Group the filtered DataFrame by `court` and count the number of `disposal_nature` for each court. Find the court with the maximum number of cases disposed. Store the court name with the maximum number of cases disposed to a variable called `most_cases_court`. Print the court name with maximum number of cases disposed. Save the grouped DataFrame to a parquet file named `task_3_cases_per_court.parquet`.",
    "tool_needed": "python",
    "dependencies": [
      2
    ],
    "input_artifacts": [
      "task_2_filtered_years.parquet"
    ],
    "output_artifacts": [
      "task_3_cases_per_court.parquet"
    ]
  },
  {
    "task_id": 4,
    "description": "Filter the original DataFrame (`task_1_all_metadata.parquet`) to include only rows where the `court` is '33_10'. Save the filtered DataFrame to a parquet file named `task_4_court_33_10.parquet`. Print the info and the first 5 rows of the filtered dataframe.",
    "tool_needed": "python",
    "dependencies": [
      1
    ],
    "input_artifacts": [
      "task_1_all_metadata.parquet"
    ],
    "output_artifacts": [
      "task_4_court_33_10.parquet"
    ]
  },
  {
    "task_id": 5,
    "description": "Convert `date_of_registration` and `decision_date` columns in `task_4_court_33_10.parquet` to datetime objects. Calculate the difference in days between `decision_date` and `date_of_registration` and store it in a new column called `delay`. Print the first 5 rows of the DataFrame with the new `delay` column. Save the updated DataFrame to `task_5_court_33_10_with_delay.parquet`.",
    "tool_needed": "python",
    "dependencies": [
      4
    ],
    "input_artifacts": [
      "task_4_court_33_10.parquet"
    ],
    "output_artifacts": [
      "task_5_court_33_10_with_delay.parquet"
    ]
  },
  {
    "task_id": 6,
    "description": "Calculate the regression slope of `date_of_registration` - `decision_date` (delay) by `year` using the data from `task_5_court_33_10_with_delay.parquet`. Print the regression slope value. Save the DataFrame used for calculating the regression slope to a parquet file named `task_6_regression_data.parquet`.",
    "tool_needed": "python",
    "dependencies": [
      5
    ],
    "input_artifacts": [
      "task_5_court_33_10_with_delay.parquet"
    ],
    "output_artifacts": [
      "task_6_regression_data.parquet"
    ]
  },
  {
    "task_id": 7,
    "description": "Create a scatterplot of `year` vs `delay` from the data in `task_5_court_33_10_with_delay.parquet` and add a regression line. Encode the plot as a base64 data URI (under 100,000 characters). Print the base64 encoded string. Save the plot as a png file named `task_7_scatterplot.png`.",
    "tool_needed": "python",
    "dependencies": [
      5
    ],
    "input_artifacts": [
      "task_5_court_33_10_with_delay.parquet"
    ],
    "output_artifacts": [
      "task_7_scatterplot.png"
    ]
  },
  {
    "task_id": 8,
    "description": "Collect the answers to the questions in a JSON format and save it to `final_output.json`. The answers are: 1) Which high court disposed the most cases from 2019 - 2022? - The answer is stored as `most_cases_court` in task 3. 2) What's the regression slope of the date_of_registration - decision_date by year in the court=33_10? - The answer is obtained in task 6. 3) Plot the year and # of days of delay from the above question as a scatterplot with a regression line. Encode as a base64 data URI under 100,000 characters - The answer is obtained in task 7.",
    "tool_needed": "python",
    "dependencies": [
      3,
      6,
      7
    ],
    "input_artifacts": [
      "task_3_cases_per_court.parquet",
      "task_6_regression_data.parquet",
      "task_7_scatterplot.png"
    ],
    "output_artifacts": [
      "final_output.json"
    ]
  }
]